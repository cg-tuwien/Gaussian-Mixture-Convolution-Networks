#version 430

// Density Visualization with Ray Marching
// Obsolete and only for testing purposes

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
layout(r32f, binding = 0) uniform image2D img_output;

layout(location=1) uniform int width;
layout(location=2) uniform int height;
layout(location=3) uniform mat4 invViewMatrix;
layout(location=4) uniform float fov;
layout(location=5) uniform sampler1D gaussTex;

struct Gaussian {
	vec4 mu_alpha;
	mat4 invsigma;
};

struct Node {
	vec4 aabb[2];
		//0 = min
		//1 = max
	ivec4 content;
		//x = children-bits
		//y = children-start index
		//z = gaussian start index
		//w = gaussian end index
};

layout(std430, binding=0) buffer GaussianMixture {
	Gaussian gaussians[];
} mixture;

layout(std430, binding=1) buffer Octree {
	Node nodes[];
} octree;

bool pointInAABB(vec3 point, vec4 aabb[2]) {
	return point.x >= aabb[0].x &&
		point.y >= aabb[0].y &&
		point.z >= aabb[0].z &&
		point.x <= aabb[1].x &&
		point.y <= aabb[1].y &&
		point.z <= aabb[1].z;
}

void main() {
	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	vec2 pixel_center = vec2(pixel_coords) + vec2(0.5);
	vec2 pixel_uv = pixel_center / vec2(width, height);
	vec2 d = pixel_uv * 2.0 - 1.0;
	float aspectRatio = float(width) / float(height);

	vec3 origin = vec3(0, 0, 0.0);
	vec3 direction = normalize(vec3(d.x * aspectRatio, d.y, -1/tan(fov/2.0)));
	vec4 p1 = vec4(origin, 1.0);
	vec4 p2 = vec4(origin + direction, 1.0);
	vec4 vp1 = invViewMatrix * p1;
	vec4 vp2 = invViewMatrix * p2;
	origin = vec3(vp1);
	direction = vec3(normalize(vp2 - vp1));

	//convert system
	origin = vec3(origin.x, -origin.z, origin.y);
	direction = vec3(direction.x, -direction.z, direction.y);

	float sum = 0;

	int STEPS = 500;
	float STEPSIZE = 0.4f;

	for (int i = STEPS; i > 0; --i) {
		vec3 samplingPoint = origin + i*STEPSIZE*direction;
		int nodesToCheck[25];
		nodesToCheck[0] = 0;
		int remainingNodeCount = 1;
		float alpha = 0;
		while (remainingNodeCount > 0) {
			int nodeidx = nodesToCheck[remainingNodeCount-1];
			remainingNodeCount -= 1;
			Node node = octree.nodes[nodeidx];
			bool intersect = pointInAABB(samplingPoint, node.aabb);
			if (intersect) {
				if (node.content.z >= 0) {
					for (int gidx = node.content.z; gidx <= node.content.w; gidx++) {
						Gaussian gauss = mixture.gaussians[gidx];
						vec3 relpos = samplingPoint - gauss.mu_alpha.xyz;
						float ex = exp(-0.5 * dot(relpos*mat3(gauss.invsigma),relpos));
						alpha += gauss.mu_alpha.w * ex;
					}
				}
				//Check Child Nodes
				int children = node.content.x;
				int currentchildindex = node.content.y;
				for (int i = 7; i >= 0; i--) {
					if ((children & (1 << i)) != 0) {
						nodesToCheck[remainingNodeCount] = currentchildindex;
						remainingNodeCount += 1;
						currentchildindex += 1;
					}
				}
			}
		}
		sum += STEPSIZE*alpha;
	}

	imageStore(img_output, pixel_coords, vec4(sum));
}